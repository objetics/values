/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package volgyerdo.value.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.geom.Point2D;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;

/**
 *
 * @author zsolt
 */
public class GeneralAssemblyComparison extends javax.swing.JFrame {

    private static DecimalFormat fiFormat = new DecimalFormat("0.0", new DecimalFormatSymbols(Locale.ENGLISH));

    /**
     * Creates new form AssemblyComparison
     */
    public GeneralAssemblyComparison() {
        initComponents();
        progress.setVisible(true);
        progress.setStringPainted(false);
        progress.setIndeterminate(true);
        calcWithFixPhi();
        calcWithChangingPhi();
        progress.setVisible(false);
    }

    private void calcWithFixPhi() {
        try {
            List<DataSeries> dataSeriesList = new ArrayList<>();
            for (double phi = 0.0; phi <= 1.0; phi += 0.2) {
                float c = (float) (phi / 2.0 + 0.5);
                dataSeriesList.add(createSeriesFixPhi(phi, new Color(c, 1f - c, 1f - c)));
            }
            SwingUtilities.invokeLater(() -> {
                plotFixPhi.setDataSeries(dataSeriesList);
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void calcWithChangingPhi() {
        try {
            List<DataSeries> dataSeriesList = new ArrayList<>();
            for (double phi0 = 0.0; phi0 <= 1.0; phi0 += 0.2) {
                float c = (float) (phi0 / 2.0 + 0.5);
                dataSeriesList.add(createSeriesChangingPhi(phi0, new Color(c, 1f - c, 1f - c)));
            }
            SwingUtilities.invokeLater(() -> {
                PlotChangingPhi.setDataSeries(dataSeriesList);
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private DataSeries createSeriesFixPhi(double phi, Color color) {
        double[] a = new double[102];
        a[1] = 10e12;
        List<Point2D> points = new ArrayList<>();
        for (int i = 0; i < 50; i++) {
            double[] a1 = new double[102];
            points.add(new Point2D.Double(i, generalAssembly(a)));
            for (int j = 1; j < 102; j++) {
                a1[j] = (1 - phi) * a[j] + phi * a[j - 1];
            }
            a = a1;
        }
        return new DataSeries("Φ=" + fiFormat.format(phi),
                points, color, true, false);
    }

    private DataSeries createSeriesChangingPhi(double phi0, Color color) {
        double[] a = new double[102];
        a[1] = 10e12;
        List<Point2D> points = new ArrayList<>();
        double phi = phi0;
        for (int i = 0; i < 50; i++) {
            double[] a1 = new double[102];
            points.add(new Point2D.Double(i, generalAssembly(a)));
            for (int j = 1; j < 102; j++) {
                phi = phi0 * Math.pow(0.33, j - 1);
                a1[j] = (1 - phi) * a[j] + phi * a[j - 1];
            }
            a = a1;

        }
        return new DataSeries("Φ₀=" + fiFormat.format(phi0),
                points, color, true, false);
    }

    private double generalAssembly(double[] a) {
        double assembly = 0;
        double total = 0;
        for (int j = 1; j < 102; j++) {
            if (a[j] > 1) {
                total+=Math.log(a[j]) / Math.log(2.);
            }
        }
        for (int j = 1; j < 102; j++) {
            if (a[j] > 1) {
                assembly += j * Math.log(a[j]) / Math.log(2.);
            }
        }
        return assembly / total;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progress = new javax.swing.JProgressBar();
        tabs = new javax.swing.JTabbedPane();
        plotFixPhi = new volgyerdo.value.ui.PlotPanel2D();
        PlotChangingPhi = new volgyerdo.value.ui.PlotPanel2D();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        progress.setStringPainted(true);
        getContentPane().add(progress, java.awt.BorderLayout.NORTH);

        tabs.addTab("Fix Phi", plotFixPhi);
        tabs.addTab("Changing Phi", PlotChangingPhi);

        getContentPane().add(tabs, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GeneralAssemblyComparison.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GeneralAssemblyComparison.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GeneralAssemblyComparison.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GeneralAssemblyComparison.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new GeneralAssemblyComparison();
                frame.setTitle("Assembly Plot");
                frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
                frame.setPreferredSize(new Dimension(950, 600));
                frame.setMinimumSize(new Dimension(950, 600));
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private volgyerdo.value.ui.PlotPanel2D PlotChangingPhi;
    private volgyerdo.value.ui.PlotPanel2D plotFixPhi;
    private javax.swing.JProgressBar progress;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables
}
